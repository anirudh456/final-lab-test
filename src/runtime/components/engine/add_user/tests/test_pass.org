#+title: Test that invokes the =do= method without any failure
#+AUTHOR: VLEAD
#+DATE: [2017-04-11 Tue]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test
  =TestAddUser= object has a holds an instance of the =AddUser= component
  against the field =component=.  This test invokes the =do= method on the
  component.

** Imports
#+BEGIN_SRC python :tangle test_do_passes.py
import unittest
from runtime.objects.session.session import Session
from runtime.components.engine.add_user.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd
from runtime.objects.email.email import Email
from runtime.objects.name.name import Name
from runtime.objects.role.role import Role
from runtime.objects.user.user import User

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component.  This test creates an
   instruction with cmd =add_user= and an existing session.  The engine's do
   method succeeds and returns instruction an user list as a result.

#+BEGIN_SRC python :tangle test_do_passes.py
class TestDoPasses(TestHarness):

    def test_do_passes(self):
        print "test_do_passes"

        newUser = User(
            name=Name(val="New Name"),
            email=Email(val="n@g.c"),
            roles=[Role.admin]
        )

        session = self.session
        instr = {
            'cmd': Cmd.add_user, 
            'session': session,
            'data': {
                'user': newUser,
            }
        }
        engine = self.component
        result = engine.do(instr)
        print result
        self.assertEqual(result['instr'], instr)
        self.assertEqual(result['result'], newUser)

#+END_SRC

