#+title: Test that invoked the =do= method without any failure
#+AUTHOR: VLEAD
#+DATE: [2017-04-11 Tue]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test
  =TestAddUsers= object holds an instance of the =AddUser= component
  against the field =component=.  This test invokes the =do= method on the
  component.

** Imports
#+BEGIN_SRC python :tangle test_do_passes.py
import unittest
from runtime.objects.user.user import User
from runtime.objects.email.email import Email
from runtime.objects.name.name import Name
from runtime.objects.role.role import Role
from runtime.exceptions.app.exception import AppException
from runtime.exceptions.arity.exception import ArityException
from runtime.exceptions.keymismatch.exception import KeyMismatchException
from runtime.components.guard.add_user.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component. 
   This test creates an instruction with cmd =add_user=, 
   an existing session and a newly created user. The guard's =do=
   method succeeds and returns the instruction as result.

#+BEGIN_SRC python :tangle test_do_passes.py
class TestDoPasses(TestHarness):

    def test_do_passes(self):
        print "test_do_passes"
        
        # Current Session
        session = self.session

        user = User(
            name=Name(val="A new User"), 
            email=Email(val="new.user@something.com"),
            roles=[Role.user]
        )
        
        instr = {
            'cmd': Cmd.add_user, 
            'session': session, 
            'data': {
                'user' : user
            }
        }
        guard = self.component
        result = guard.do(instr)
        self.assertEqual(result, instr)

#+END_SRC

