#+title: Test on add_user route when session is not present in the entity manager
#+AUTHOR: VLEAD
#+DATE: [2017-04-11 Tue]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test 
  =TestAddUser= object has a holds an instance of the =AddUser= component
  against the field =component=.  This test invokes the =do= method on the
  component which throws an =AppException= when state check is performed.

** Imports
#+BEGIN_SRC python :tangle test_no_session.py
import unittest
from runtime.objects.session.session import Session
from runtime.objects.role.role import Role
from runtime.objects.name.name import Name
from runtime.objects.email.email import Email
from runtime.objects.user.user import User
from runtime.exceptions.app.exception import AppException
from runtime.exceptions.arity.exception import ArityException
from runtime.exceptions.keymismatch.exception import KeyMismatchException
from runtime.components.guard.add_user.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component. This test creates an
   instruction with cmd =add_user= and a session.  The entity manager does not
   hold a session contained in the instruction.  The guard's do method raises an
   =AppException= with a message =session is not in the entity manager=.

#+BEGIN_SRC python :tangle test_no_session.py
class TestNoSession(TestHarness):

    def test_no_session(self):
        print "test_no_session"
        # delete session from entity manager setup in the TestHarness
        self.component.em.delete_session(self.session)
        session = self.session
        user = User(
            name=Name(val="Jon doe"),
            email=Email(val="jon@doe.co"),
            roles=[Role.user]
        )
        instr = {
            'cmd': Cmd.add_user, 
            'session': session, 
            'data': {
                'user': user
            }
        }
        guard = self.component
        with self.assertRaises(AppException):
            guard.do(instr)

#+END_SRC
