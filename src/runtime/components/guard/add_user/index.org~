#+TITLE: =add_user= route of the =Guard= component
#+AUTHOR: Harshit
#+DATE: [2017-04-26 Tue]
#+SETUPFILE: ../../../../org-templates/level-4.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction  

This is the specification and implementation of the
=add_user= route of the =Guard= component.  

* Checks

 - TypeCheck :: Check whether the instruction consists of
      the command =add_user=, the =data= dictionary of =user=
      object of type User and additionally contains a
      session object (and nothing else).  The typecheck may
      be implemented by consulting the [[../../../datatypes/instr/index.org][instruction datatype]]
      specification.


 - AuthCheck :: Check whether the role in the session is =admin=. 
      Only admins are allowed to create or delete users.

 - StateCheck :: Check whether the session in the
      instruction is indeed an entity currently present in
      the entity manager's session aggregate.

Note that there is a unique constraint on the email field of 
the user being created. The email should not already belong 
to an existing user.

* Implementation
** Imports and class =AddUser=
#+BEGIN_SRC python :tangle add_user.py
import traceback
from runtime.exceptions.app.exception import AppException
from runtime.utils.type_utils.type_utils import check_pred
from runtime.datatypes.cmd.cmd import Cmd
from runtime.objects.session.session import Session
from runtime.objects.role.role import Role
from runtime.datatypes.instr.add_user.add_user_instr import AddUserInstr

class AddUser:

#+END_SRC

** The type structure of the =add_user= route

The =add_user= route is a dictionary with 'cmd' equal to
=Cmd.add_user=, a 'data' which is again a dictionary with 
'user' which is instance of class =User= and a 'session' 
that is an instance of =Session=.

** The =do= method
This method takes a component and instruction and simply
does all the checks.
#+BEGIN_SRC python :tangle add_user.py
    @staticmethod 
    def do(component, instr):
        print "add_user: %s" % instr

        AddUser.check_type(instr)
        AddUser.check_auth(component, instr)
        AddUser.check_state(component, instr)
        return instr

#+END_SRC

* Checks
** Type checks

Check if the the instruction is of the correct shape,
i.e. satisfies the predicate =AddUserInstr.is_inst=.

#+BEGIN_SRC python :tangle add_user.py
    @staticmethod
    def check_type(instr):
        check_pred(AddUserInstr.is_inst)(instr)
#+END_SRC

** Authorization check

This function checks if the user in the session of the
instruction has =admin= role as one of its roles.   If not,
an exception is to be raised.

    1. Retrieve the session from the instr
 
    2. Retrieve the user from the session

    3. Retrieve the role from the session

    4. If the role is not an admin role (=Role.admin=) then
       raise an exception.

    5. Otherwise return the instruction.

#+BEGIN_SRC python :tangle add_user.py
    @staticmethod
    def check_auth(component, instr):
        # replace pass with your code 
        a = instruction['session']
        b = a.

#+END_SRC

** State check

This check passes if the session is already an entity
present in the entity manager.  Otherwise an exception
is raised.

    1. Retrieve the session from the instruction.
 
    2. Retrieve the entity manager from the component.
 
    3. Check if the session is present in the entity
       manager. 

    4. If the session is not present, then raise an
       exception.  The instruction's session must always be
       in the session aggregate managed by the entity manager.

#+BEGIN_SRC python :tangle add_user.py

    @staticmethod
    def check_state(component, instr):
        if not component.em.is_present(instr['session']):
            raise AppException(op="add_user.chec_state",
                                   msg="session is not in the entity manager")

        return instr

#+END_SRC

* Package                                                       :boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "runtime.components.guard.add_user package"
#+END_SRC

