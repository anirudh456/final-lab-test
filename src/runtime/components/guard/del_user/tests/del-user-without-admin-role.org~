#+title: Test on del_user route when the role in the session is not admin
#+AUTHOR: VLEAD
#+DATE: [2017-04-11 Tue]
#+SETUPFILE: ../../../../../org-templates/level-5.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Test 
  =TestDelUser= object holds an instance of the =DelUser= component
  against the field =component=.  This test invokes the =do= method on the
  component and an =Exception= when state check is performed.

** Imports
#+BEGIN_SRC python :tangle test_del_user_with_user_role.py
import unittest
from runtime.objects.email.email import Email
from runtime.objects.name.name import Name
from runtime.objects.role.role import Role
from runtime.objects.user.user import User
from runtime.objects.session.session import Session
from runtime.components.guard.del_user.tests.harness import TestHarness
from runtime.datatypes.cmd.cmd import Cmd

#+END_SRC


** Test Case

   Imports the TestHarness which sets up the component.  This test creates an
   instruction with cmd =del_user= and a session.  The entity manager does not
   hold a session contained in the instruction.  The guard's do method raises an
   =Exception=.

   Following are the steps to be taken:
    - Create a new user with user role
    - Add it to User set using entity manager
    - Create a session with this user in it and a random key
    - Add this session to the Session set using entity manager
    - Create another new user object (the one to be
      deleted).  Add it to the user set using the entity
      manager.
    - Create the instruction datatypes for =del_user= route with
      the above session and to delete this newly created user.
    - Call the guard's =do=  with this instruction.

The test should raise an exception with the method itself catching it.


#+BEGIN_SRC python :tangle test_del_user_with_user_role.py
class TestCheckAuth(TestHarness):

    def test_check_auth(self):
        print "test_check_auth"

        # replace the next line with your code
        self.assertTrue(True)

#+END_SRC
