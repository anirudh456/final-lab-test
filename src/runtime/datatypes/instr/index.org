#+title:  The =Instr= datatype
#+DATE: [2016-05-11 Wed]
#+SETUPFILE: ../../../org-templates/level-3.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

The instruction is an input to a Guard.

** Structure of an instruction

An instruction is a dictionary consisting of at least the
=cmd= binding, which is a string signifying the command
embodied in the instruction.  The dictionary may carry
additional bindings.  Depending on =cmd=, additional
arguments are present.  



#+BEGIN_SRC python :tangle instr.py
class Instr():

    def __init__(self):
        raise Exception("can not instantiate!")

    @staticmethod
    def is_inst(thing):
        return ShowUsersInstr.is_inst(thing) # or \
#               AddUserInstr.is_inst(thing)  # etc.

#         overkill  
#         return ormap(lambda route: route.is_inst(thing), [ShowUsersInstr])

#+END_SRC


* Instruction types

  There are three types of instructions, depending on the
  command.  Each is implemented in a class

  - "show_users" : [[./show_users/index.org][ShowUserInstr]]

  - "add_user" :  [[./add_user/index.org][AddUserInstr]]

  - "del_user" :  [[./del_user/index.org][DelUserInstr]]

* Specs for various instruction type

The spec field of each instruction type specifies the
``shape'' of the instruction: what additional information
along with the command is present in the instruction.

* Package 														:boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "runtime.datatypes.instr package"
#+END_SRC


